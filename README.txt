Παπαγεωργίου Αλέξανδρος
ΠΜΣ Κατεύθυνση Συστημάτων Λογισμικού
Πανεπιστήμιο Πελοποννήσου

1. Περιγραφή
2. Δομή προγράμματος
3. Μεταγλώττιση
  3.1 Windows (Visual Studio 2008)
  3.2 linux (gcc)
4. Εκτέλεση

1. Περιγραφή
============
Το παρόν πρόγραμμα δημιουργήθηκε  στα πλαίσια της πτυχιακής εργασίας «Απλοποίηση τριγωνικών μοντέλων στην GPU». Η υλοποίηση αποτελείται από τον παράλληλο αλγόριθμο απλοποίησης τριγώνων στην OpenCL και το κατάλληλο περίβλημα για τον χειρισμό και οπτικοποίησης των μοντέλων. Το πρόγραμμα χρησιμοποιώντας την GPU απλοποιεί τρισδιάστατα μοντέλα που είναι αποθηκευμένα σε αρχεία τύπου ply και έχει την δυνατότητα αποθήκευσης των αποτελεσμάτων σε αρχεία ίδιου τύπου.

2. Δομή προγράμματος
====================
Το πρόγραμμα αποτελείται από τρία τμήματα:
|-Model
| =====
| |-object     αναπαράσταση ενός μοντέλου
| |-plyObject  μοντέλο που διαβάζεται/γράφεται σε ένα αρχείο .ply
| \-rply       βιβλιοθήκη που χρησιμοποιείται για διάβασμα/γράψιμο .ply αρχείων
|
|-Viewer
| ======
| |-camera          Διαχείριση  της κάμερας ώστε να είναι δυνατή η επισκόπηση του
| |                 μοντέλου από διάφορες γωνίες
| |                 
| |-scene           Η σκηνή που κρατά το μοντέλο που οπτικοποιείται (πριν και
| |                 μετά την απλοποίηση)
| |                 
| \-glut_callbacks  Διαχείριση του παραθύρου και της εισόδου από τον χρήστη. 
|
\-Decimator
  =========
  \-decimator  Κλάση η που καθοδηγεί την απλοποίηση του μοντέλου από την OpenCL.
    |          Η υλοποίησή της (λόγω μεγέθους) έχει σπάσει σε ξεχωριστά αρχεία
    |          ανάλογα με την λειτουργικότητα του κάθε τμήματος:
    |          
    |-decimator.cpp                   Αρχικοποίηση, ανάθεση παραμέτρων και διαδικασία
    |                                 συρρίκνωσης ακμής
    |                                 
    |-decimatorPrepareData.cpp        Τμήματα του αλγορίθμου που εκτελούνται
    |                                 πριν την επαναληπτική δομή. Δέσμευση memory
    |                                 objects, υπολογισμός αρχικών quadrics και
    |                                 δεικτών από τις κορυφές προς τα τρίγωνα.
    |                                 
    |-decimatorIndependentPoints.cpp  Υλοποίηση τριών αλγόριθμων για την εύρεση
    |                                 ανεξάρτητων κορυφών.
    |                                 
    |-decimatorSort.cpp               Ταξινόμηση ανεξάρτητων κορυφών βασισμένη
    |                                 στον bitonic sort
    | 
    |-kernels.cl                      Υλοποίηση των πυρήνων που εκτελούνται από
    |                                 την OpenCL
    | 
    \-decimatorDataValidator.cpp      κώδικας ελέγχου των δεδομένων (όταν η
                                      εκτέλεση γίνεται στη CPU)


3. Μεταγλώττιση
===============
Οι εξαρτήσεις που υπάρχουν (πέραν της στάνταρ βιβλιοθήκης της c++) είναι οι:
  OpenGL (libGL libGLU)
  GLEW (libGLEW)
  glut (libglut)
  OpenCL (libOpenCL)
  
3.1 Windows (Visual Studio 2008)
--------------------------------
Για τη μεταγλώττιση στα Windows παρέχεται τα κατάλληλα αρχεία για το project/solution που χρειάζεται το Visual Studio (στην έκδοση 2008 sp1). Για την χρήση της OpenCL, αν δεν έχει γίνει εγκατάσταση καθολικά για το σύστημα πρέπει να οριστούν οι φάκελοι Include directories και Library directories όπως υπάρχουν από την εγκατάσταση της OpenCL. Επίσης στις βιβλιοθήκες έχουν προστεθεί το OpenCL και glew32(32bit έκδοση) καθώς δεν προσθέτονται αυτόματα από τα εργαλεία.
 
3.2 linux (gcc)
---------------
Για τη μεταγλώττιση στο linux παρέχεται το κατάλληλο makefile (στον φάκελο linux). Η μεταγλώττιση του προγράμματος γίνεται στα 32bit λόγω περιορισμού της βιβλιοθήκης rply που χρησιμοποιείται για να διαβάζει τα μοντέλα. Για την ανάπτυξη χρησιμοποιήθηκε η υλοποίηση της ATI για την βιβλιοθήκη της OopeCL και από το makefile χρησιμοποιούνται τα AMDAPPSDKROOT τα οποία πρέπει να είναι ορισμένα πριν την μεταγλώττιση του προγράμματος. Σε περίπτωση που η εγκατάσταση της OpenCL έχει γίνει καθολικά για το σύστημα ή υπάρχει κάποια διαφορετική υλοποίησή της, θα πρέπει να τροποποιηθούν κατάλληλα οι μεταβλητές CFLAGS και LDFLAGS.


4. Εκτέλεση
===========
Δίνοντας "--help" σαν παράμετρο στο πρόγραμμα, εμφανίζεται το κείμενο βοήθειας που φαίνεται παρακάτω

decimator inFile [-o outfile] [--overwrite] [--cw] [--ccw] [--antialiasing] [--gpu] [--cpu] [--kernels kernelsFile] [--target numberOfVertices] [--pointsPerPassFactor factor] [--independentPointsAlgorithm (1|2|3)] [--help]

    -o                              The output file
    --overwrite                     Overwrites the output file if exists
    --ccw                           Counterclockwise triangles in infile
    --cw                            clockwise triangles in infile
    --antialiasing                  Enable antialiasig in the display
    --gpu                           OpenCL run on GPU
    --cpu                           openCL runs on cpu
    --kernels                       Te location of the kernels file
    --target                        The number of vertices for the result of the decimation ( > 0 )
    --pointsPerPassFactor           Percentage of the independent points that are used at every pass of the decimation algorithm
    --independentPointsAlgorithm    The algorithm to be used
    --help                          This Message

Default Values
--------------
run on: gpu
triangle orientation: ccw
kernels: kernels.cl
target 0.5
pointsPerPassFactor: 0.85
independentPointsAlgorithm: 3


Οι κυριότερες παράμετροι που χρειάζονται είναι το αρχείο που βρίσκεται το μοντέλο που θέλουμε να απλοποιήσουμε και ο στόχος απλοποίησης. Σαν παράδειγμα εκτέλεσης, για να απλοποιήσουμε το μοντέλο του αλόγου (που βρίσκεται στο αρχείο horse.ply) στις 5000 κορυφές εκτελούμε την εντολή :

decimator horse.ply --target 5000

Το πρόγραμμα μόλις φορτώσει το μοντέλο, δημιουργεί ένα παράθυρο και το εμφανίζει στην αρχική του λεπτομέρεια. Στην κατάσταση που βρίσκεται, όταν πατηθεί το κουμπί 'd' ξεκινά η απλοποίηση. Μόλις αυτή ολοκληρωθεί, στο παράθυρο του προγράμματος εμφανίζεται το απλοποιημένο μοντέλο. 

Aν θέλουμε να σώσουμε το απλοποιημένο μοντέλο, πρέπει κατά την εκτέλεση του προγράμματος να χρησιμοποιήσουμε την παράμετρο "-o" ακολουθούμενη από το αρχείο εξόδου (και αν το επιθυμούμε την παράμετρο --overwrite για τν περίπτωση του το αρχείο ήδη υπάρχει), και αφού απλοποιήσουμε το μοντέλο που έχουμε επιλέξει, μπορούμε να το αποθηκευσουμε πατώντας τοκουμπί 's'.


